"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[930],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>b});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(n),g=i,b=p["".concat(s,".").concat(g)]||p[g]||d[g]||a;return n?r.createElement(b,o(o({ref:t},u),{},{components:n})):r.createElement(b,o({ref:t},u))}));function b(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=g;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:i,o[1]=l;for(var c=2;c<a;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},5075:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var r=n(7462),i=(n(7294),n(3905));const a={sidebar_position:3},o="Architecture",l={unversionedId:"contributing/architecture",id:"contributing/architecture",title:"Architecture",description:"Database",source:"@site/docs/contributing/architecture.md",sourceDirName:"contributing",slug:"/contributing/architecture",permalink:"/docs/contributing/architecture",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"docSidebar",previous:{title:"Development",permalink:"/docs/contributing/development"},next:{title:"Testing",permalink:"/docs/contributing/testing"}},s={},c=[{value:"Database",id:"database",level:2},{value:"Logging",id:"logging",level:2},{value:"Frontend",id:"frontend",level:2}],u={toc:c},p="wrapper";function d(e){let{components:t,...n}=e;return(0,i.kt)(p,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"architecture"},"Architecture"),(0,i.kt)("h2",{id:"database"},"Database"),(0,i.kt)("p",null,"We are using the Golang standard libraries database/sql to manage our db connections.",(0,i.kt)("br",null),"\nThis allows us to use any database driver that implements the interface.",(0,i.kt)("br",null),"\nFor now we are using ",(0,i.kt)("a",{parentName:"p",href:"https://modernc.org/sqlite/"},"modernc.org/sqlite")," for SQLite3."),(0,i.kt)("h2",{id:"logging"},"Logging"),(0,i.kt)("p",null,"We are using ",(0,i.kt)("inlineCode",{parentName:"p"},"golang.org/x/slog")," for logging.",(0,i.kt)("br",null),"\nA reusable logger is created in ",(0,i.kt)("inlineCode",{parentName:"p"},"internal/log"),".",(0,i.kt)("br",null),"\nThis should be used in all packages.",(0,i.kt)("br",null),"\nIt will log to stderr and to a .json file ",(0,i.kt)("inlineCode",{parentName:"p"},"~/.bunkr/log/bunkr.log.json"),".",(0,i.kt)("br",null),"\nThis global logger will also take care of log file rotation.",(0,i.kt)("br",null),"\nA new log file will be created on every startup.",(0,i.kt)("br",null),"\nThe old log file will be renamed to ",(0,i.kt)("inlineCode",{parentName:"p"},"bunkr.log.json.1"),".",(0,i.kt)("br",null),"\nA maximum of 5 log files will be kept.",(0,i.kt)("br",null),"\nOld log files will be deleted on startup.",(0,i.kt)("br",null)),(0,i.kt)("h2",{id:"frontend"},"Frontend"),(0,i.kt)("p",null,"We are using Go's ",(0,i.kt)("inlineCode",{parentName:"p"},"html/template")," for server-side rendering of HTML. This allows us to dynamically generate HTML pages on the server-side based on the data we have. For client-side interactivity, we are using ",(0,i.kt)("a",{parentName:"p",href:"https://htmx.org/"},"htmx")," and ",(0,i.kt)("a",{parentName:"p",href:"https://hyperscript.org/"},"hyperscript"),". htmx allows us to access AJAX, CSS Transitions, WebSockets and Server Sent Events directly in HTML, enabling us to keep our frontend code simple and declarative. Hyperscript complements this by providing a mechanism to handle complex client-side logic in a simple and maintainable way. This combination allows us to create a rich, interactive user experience with minimal complexity."))}d.isMDXComponent=!0}}]);